import aiogram, logging; from aiogram import Bot, Dispatcher, types, executor; from aiogram.dispatcher.filters import Command; from datetime import datetime, timedelta;
from config import TOKEN;

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN, parse_mode='HTML')
dp = Dispatcher(bot)

async def on_startup(_):
    print('Bot was started!')
    await bot.send_message(-1001591876770, f'''–ë–æ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –∏ –∑–∞–ø—É—â–µ–Ω.''')



@dp.message_handler(commands=['start'], commands_prefix='/!.')
async def start_cmd(message: types.Message):
    await message.reply(f'''–ü—Ä–∏–≤–µ—Ç!
–Ø –†–∏–∫ - —á–∞—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä.
–ü–æ–º–æ—â—å: /help''')

@dp.message_handler(commands=['–ø–æ–º–æ—â—å', 'help'], commands_prefix='/!.')
async def help_cmd(message: types.Message):
   await message.reply(f'''/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/help - –ø–æ–º–æ—â—å
/rp - —Å–ø–∏—Å–æ–∫ –†–ü
/mute (—Ü–∏—Ñ—Ä–∞) (–º–∏–Ω—É—Ç/—á–∞—Å–æ–≤/–¥–Ω–µ–π) (–ø—Ä–∏—á–∏–Ω–∞) - –º—É—Ç
/ban (—Ü–∏—Ñ—Ä–∞) (–º–∏–Ω—É—Ç/—á–∞—Å–æ–≤/–¥–Ω–µ–π) (–ø—Ä–∏—á–∏–Ω–∞) - –±–∞–Ω
/unmute - —Ä–∞–∑–º—É—Ç
/unban - —Ä–∞–∑–±–∞–Ω
/pin - –∑–∞–∫—Ä–µ–ø–∏—Ç—å
/unpin - –æ—Ç–∫—Ä–µ–ø–∏—Ç—å (/unpin –≤—Å–µ - –æ—Ç–∫—Ä–µ–ø–∏—Ç—å –≤—Å–µ)
/admins - —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤''')

@dp.message_handler(commands=['—Ä–ø', 'rp'], commands_prefix='/!.')
async def rp_cmd(message: types.Message):
    await message.reply(f'''1. !–≤—ã–µ–±–∞—Ç—å (—Ä–µ–ø–ª–∏–∫–∞)
2. !–¥–∞—Ç—å (—Ä–µ–ø–ª–∏–∫–∞)
3. !–∏—Å–ø—É–≥–∞—Ç—å (—Ä–µ–ø–ª–∏–∫–∞)
4. !–∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å (—Ä–µ–ø–ª–∏–∫–∞)
5. !–ª–∏–∑–Ω—É—Ç—å (—Ä–µ–ø–ª–∏–∫–∞)
6. !–æ–±–Ω—è—Ç—å (—Ä–µ–ø–ª–∏–∫–∞)
7. !–æ—Ç–¥–∞—Ç—å—Å—è (—Ä–µ–ø–ª–∏–∫–∞)
8. !–æ—Ç–ª–∏–∑–∞—Ç—å (—Ä–µ–ø–ª–∏–∫–∞)
9. !–æ—Ç—Ä–∞–≤–∏—Ç—å (—Ä–µ–ø–ª–∏–∫–∞)
10. !–æ—Ç—Å–æ—Å–∞—Ç—å (—Ä–µ–ø–ª–∏–∫–∞)
11. !–ø–æ–∫–æ—Ä–º–∏—Ç—å (—Ä–µ–ø–ª–∏–∫–∞)
12. !–ø–æ—Å–ª–∞—Ç—å (—Ä–µ–ø–ª–∏–∫–∞)
13. !–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å (—Ä–µ–ø–ª–∏–∫–∞)
14. !–ø—Ä–∏–∂–∞—Ç—å (—Ä–µ–ø–ª–∏–∫–∞)
15. !—Å–∂–µ—á—å (—Ä–µ–ø–ª–∏–∫–∞)
16. !—Ç—Ä–∞—Ö–Ω—É—Ç—å (—Ä–µ–ø–ª–∏–∫–∞)
17. !—É–±–∏—Ç—å (—Ä–µ–ø–ª–∏–∫–∞)
18. !do (—Ä–µ–ø–ª–∏–∫–∞)
19. !me (—Ä–µ–ø–ª–∏–∫–∞)''')


 
@dp.message_handler(commands=['–≤—ã–µ–±–∞—Ç—å'], commands_prefix='/!.')
async def –≤—ã–µ–±–∞—Ç—å(message: types.Message):
   if not message.reply_to_message:
      await message.reply(f'''–ù—É–∂–Ω–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.''')
      return
   args = ' '.join(message.text.split()[1:])
   await bot.send_message(message.chat.id, f'''üëâüëåüò¨ | {message.from_user.get_mention(as_html=True)} –≤—ã–µ–±–∞–ª(-–∞) <a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.full_name}</a> {args}''')

@dp.message_handler(commands=['–¥–∞—Ç—å'], commands_prefix='/!.')
async def –¥–∞—Ç—å(message: types.Message):
   if not message.reply_to_message:
      await message.reply(f'''–ù—É–∂–Ω–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.''')
      return
   args = ' '.join(message.text.split()[1:])
   await bot.send_message(message.chat.id, f'''üôèüèª | {message.from_user.get_mention(as_html=True)} –¥–∞–ª(-–∞) <a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.full_name}</a> {args}''')

@dp.message_handler(commands=['–∏—Å–ø—É–≥–∞—Ç—å'], commands_prefix='/!.')
async def –∏—Å–ø—É–≥–∞—Ç—å(message: types.Message):
   if not message.reply_to_message:
      await message.reply(f'''–ù—É–∂–Ω–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.''')
      return
   args = ' '.join(message.text.split()[1:])
   await bot.send_message(message.chat.id, f'''üò± | {message.from_user.get_mention(as_html=True)} –∏—Å–ø—É–≥–∞–ª(-–∞) <a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.full_name}</a> {args}''')

@dp.message_handler(commands=['–∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å'], commands_prefix='/!.')
async def –∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å(message: types.Message):
   if not message.reply_to_message:
      await message.reply(f'''–ù—É–∂–Ω–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.''')
      return
   args = ' '.join(message.text.split()[1:])
   await bot.send_message(message.chat.id, f'''‚úÇÔ∏è | {message.from_user.get_mention(as_html=True)} –∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª(-–∞) <a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.full_name}</a> {args}''')

@dp.message_handler(commands=['–ª–∏–∑–Ω—É—Ç—å'], commands_prefix='/!.')
async def –ª–∏–∑–Ω—É—Ç—å(message: types.Message):
   if not message.reply_to_message:
      await message.reply(f'''–ù—É–∂–Ω–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.''')
      return
   args = ' '.join(message.text.split()[1:])
   await bot.send_message(message.chat.id, f'''üëÖ | {message.from_user.get_mention(as_html=True)} –ª–∏–∑–Ω—É–ª(-–∞) <a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.full_name}</a> {args}''')

@dp.message_handler(commands=['–æ–±–Ω—è—Ç—å'], commands_prefix='/!.')
async def –æ–±–Ω—è—Ç—å(message: types.Message):
   if not message.reply_to_message:
      await message.reply(f'''–ù—É–∂–Ω–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.''')
      return
   args = ' '.join(message.text.split()[1:])
   await bot.send_message(message.chat.id, f'''ü§ó | {message.from_user.get_mention(as_html=True)} –æ–±–Ω—è–ª(-–∞) <a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.full_name}</a> {args}''')

@dp.message_handler(commands=['–æ—Ç–¥–∞—Ç—å—Å—è'], commands_prefix='/!.')
async def –æ—Ç–¥–∞—Ç—å—Å—è(message: types.Message):
   if not message.reply_to_message:
      await message.reply(f'''–ù—É–∂–Ω–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.''')
      return
   args = ' '.join(message.text.split()[1:])
   await bot.send_message(message.chat.id, f'''üíù | {message.from_user.get_mention(as_html=True)} –æ—Ç–¥–∞–ª—Å—è(-–∞—Å—å) <a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.full_name}</a> {args}''')

@dp.message_handler(commands=['–æ—Ç–ª–∏–∑–∞—Ç—å'], commands_prefix='/!.')
async def –æ—Ç–ª–∏–∑–∞—Ç—å(message: types.Message):
   if not message.reply_to_message:
      await message.reply(f'''–ù—É–∂–Ω–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.''')
      return
   args = ' '.join(message.text.split()[1:])
   await bot.send_message(message.chat.id, f'''üëÖ | {message.from_user.get_mention(as_html=True)} –æ—Ç–ª–∏–∑–∞–ª(-–∞) —É <a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.full_name}</a> {args}''')

@dp.message_handler(commands=['–æ—Ç—Ä–∞–≤–∏—Ç—å'], commands_prefix='/!.')
async def –æ—Ç—Ä–∞–≤–∏—Ç—å(message: types.Message):
   if not message.reply_to_message:
      await message.reply(f'''–ù—É–∂–Ω–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.''')
      return
   args = ' '.join(message.text.split()[1:])
   await bot.send_message(message.chat.id, f'''üíä | {message.from_user.get_mention(as_html=True)} –æ—Ç—Ä–∞–≤–∏–ª(-–∞) <a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.full_name}</a> {args}''')

@dp.message_handler(commands=['–æ—Ç—Å–æ—Å–∞—Ç—å'], commands_prefix='/!.')
async def –æ—Ç—Å–æ—Å–∞—Ç—å(message: types.Message):
   if not message.reply_to_message:
      await message.reply(f'''–ù—É–∂–Ω–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.''')
      return
   args = ' '.join(message.text.split()[1:])
   await bot.send_message(message.chat.id, f'''ü•≥ | {message.from_user.get_mention(as_html=True)} –æ—Ç—Å–æ—Å–∞–ª(-–∞) —É <a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.full_name}</a> {args}''')

@dp.message_handler(commands=['–ø–æ–∫–æ—Ä–º–∏—Ç—å'], commands_prefix='/!.')
async def –ø–æ–∫–æ—Ä–º–∏—Ç—å(message: types.Message):
   if not message.reply_to_message:
      await message.reply(f'''–ù—É–∂–Ω–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.''')
      return
   args = ' '.join(message.text.split()[1:])
   await bot.send_message(message.chat.id, f'''üçï | {message.from_user.get_mention(as_html=True)} –ø–æ–∫–æ—Ä–º–∏–ª(-–∞) <a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.full_name}</a> {args}''')

@dp.message_handler(commands=['–ø–æ—Å–ª–∞—Ç—å'], commands_prefix='/!.')
async def –ø–æ—Å–ª–∞—Ç—å(message: types.Message):
   if not message.reply_to_message:
      await message.reply(f'''–ù—É–∂–Ω–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.''')
      return
   args = ' '.join(message.text.split()[1:])
   await bot.send_message(message.chat.id, f'''üñï | {message.from_user.get_mention(as_html=True)} –ø–æ—Å–ª–∞–ª(-–∞) <a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.full_name}</a> {args}''')

@dp.message_handler(commands=['–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å'], commands_prefix='/!.')
async def –ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å(message: types.Message):
   if not message.reply_to_message:
      await message.reply(f'''–ù—É–∂–Ω–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.''')
      return
   args = ' '.join(message.text.split()[1:])
   await bot.send_message(message.chat.id, f'''üòò | {message.from_user.get_mention(as_html=True)} –ø–æ—Ü–µ–ª–æ–≤–∞–ª(-–∞) <a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.full_name}</a> {args}''')

@dp.message_handler(commands=['–ø—Ä–∏–∂–∞—Ç—å'], commands_prefix='/!.')
async def –ø—Ä–∏–∂–∞—Ç—å(message: types.Message):
   if not message.reply_to_message:
      await message.reply(f'''–ù—É–∂–Ω–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.''')
      return
   args = ' '.join(message.text.split()[1:])
   await bot.send_message(message.chat.id, f'''ü§≤ | {message.from_user.get_mention(as_html=True)} –ø—Ä–∏–∂–∞–ª(-–∞) <a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.full_name}</a> {args}''')

@dp.message_handler(commands=['—Å–∂–µ—á—å'], commands_prefix='/!.')
async def —Å–∂–µ—á—å(message: types.Message):
   if not message.reply_to_message:
      await message.reply(f'''–ù—É–∂–Ω–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.''')
      return
   args = ' '.join(message.text.split()[1:])
   await bot.send_message(message.chat.id, f'''üî• | {message.from_user.get_mention(as_html=True)} —Å–∂—ë–≥(-–æ–∂–≥–ª–∞) <a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.full_name}</a> {args}''')

@dp.message_handler(commands=['—Ç—Ä–∞—Ö–Ω—É—Ç—å'], commands_prefix='/!.')
async def —Ç—Ä–∞—Ö–Ω—É—Ç—å(message: types.Message):
   if not message.reply_to_message:
      await message.reply(f'''–ù—É–∂–Ω–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.''')
      return
   args = ' '.join(message.text.split()[1:])
   await bot.send_message(message.chat.id, f'''üëâüëå | {message.from_user.get_mention(as_html=True)} —Ç—Ä–∞—Ö–Ω—É–ª(-–∞) <a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.full_name}</a> {args}''')

@dp.message_handler(commands=['—É–±–∏—Ç—å'], commands_prefix='/!.')
async def —É–±–∏—Ç—å(message: types.Message):
   if not message.reply_to_message:
      await message.reply(f'''–ù—É–∂–Ω–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.''')
      return
   args = ' '.join(message.text.split()[1:])
   await bot.send_message(message.chat.id, f'''ü§°üî™ | {message.from_user.get_mention(as_html=True)} —É–±–∏–ª(-–∞) <a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.full_name}</a> {args}''')

@dp.message_handler(commands=['do'], commands_prefix='/!.')
async def do_cmd(message: types.Message, command: Command):
   if not command.args:
      await message.reply(f'''–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: <code>!do –¶–≤–µ—Ç—ã –ø–æ–ª–∏—Ç—ã</code>''')
      return
   await bot.send_message(message.chat.id, f'''{command.args}. (<b>{message.from_user.full_name}</b>)''')
   await message.delete()

@dp.message_handler(commands=['me'], commands_prefix='/!.')
async def me_cmd(message: types.Message, command: Command):
   if not command.args:
      await message.reply(f'''–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: <code>!me –ø–æ–ª–∏–ª(-–∞) —Ü–≤–µ—Ç—ã</code>''')
      return
   if command.args:
      await bot.send_message(message.chat.id, f'''<b>{message.from_user.full_name}</b> {command.args}.''')
      await message.delete()


   
@dp.message_handler(commands=['–º—É—Ç', 'mute'], commands_prefix='/!.')
async def mute_cmd(message: types.Message):
    try:
        member = await bot.get_chat_member(message.chat.id, message.from_id)
        if member.status not in {'administrator', 'creator'}:
            await message.reply(f'''–¢—ã –Ω–µ –º–æ–∂–µ—à—å –¥–∞—Ç—å –º—É—Ç, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏–º–µ–µ—à—å –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.''')
            return
        elif not message.reply_to_message:
            await message.reply(f'''–ù—É–∂–Ω–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.''')
            return
        admin = await bot.get_chat_member(message.chat.id, message.reply_to_message.from_user.id)
        if admin.status in {'administrator', 'creator'}:
            await message.reply(f'''–¢—ã –Ω–µ –º–æ–∂–µ—à—å –¥–∞—Ç—å –º—É—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.''')
            return
        mute_time = int(message.text.split()[1])
        mute_type = message.text.split()[2]
        mute_reason = ' '.join(message.text.split()[3:])
    except IndexError:
        await message.reply(f'''–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: <code>/mute 10 –º–∏–Ω—É—Ç —Ñ–ª—É–¥</code>''')
        return
    except ValueError:
        await message.reply(f'''–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: <code>/mute 10 –º–∏–Ω—É—Ç —Ñ–ª—É–¥</code>''')
        return
    if mute_type == mute_type == '–º–∏–Ω—É—Ç–∞' or mute_type == '–º–∏–Ω—É—Ç—É' or mute_type == '–º–∏–Ω—É—Ç—ã' or mute_type == '–º–∏–Ω—É—Ç':
        dnt = datetime.now() + timedelta(minutes=mute_time)
        dntt = dnt.timestamp()
        await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False), until_date = dntt)
        await bot.send_message(message.chat.id, f'''üîá <a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.full_name}</a>, –º—É—Ç –Ω–∞ {mute_time} {mute_type} –ø–æ –ø—Ä–∏—á–∏–Ω–µ "{mute_reason}".''')
    elif mute_type == '—á–∞—Å' or mute_type == '—á–∞—Å–∞' or mute_type == '—á–∞—Å–æ–≤':
        dnt = datetime.now() + timedelta(hours=mute_time)
        dntt = dnt.timestamp()
        await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False), until_date = dntt)
        await bot.send_message(message.chat.id, f'''üîá <a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.full_name}</a>, –º—É—Ç –Ω–∞ {mute_time} {mute_type} –ø–æ –ø—Ä–∏—á–∏–Ω–µ "{mute_reason}".''')
    elif mute_type == '–¥–µ–Ω—å' or mute_type == '–¥–Ω—è' or mute_type == '–¥–Ω–µ–π':
        dnt = datetime.now() + timedelta(days=mute_time)
        dntt = dnt.timestamp()
        await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False), until_date = dntt)
        await bot.send_message(message.chat.id, f'''üîá <a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.full_name}</a>, –º—É—Ç –Ω–∞ {mute_time} {mute_type} –ø–æ –ø—Ä–∏—á–∏–Ω–µ "{mute_reason}".''')

@dp.message_handler(commands=['–±–∞–Ω', 'ban'], commands_prefix='/!.')
async def ban_cmd(message: types.Message):
    try:
        member = await bot.get_chat_member(message.chat.id, message.from_id)
        if member.status not in {'administrator', 'creator'}:
            await message.reply(f'''–¢—ã –Ω–µ –º–æ–∂–µ—à—å –¥–∞—Ç—å –±–∞–Ω, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏–º–µ–µ—à—å –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.''')
            return
        elif not message.reply_to_message:
            await message.reply(f'''–ù—É–∂–Ω–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.''')
            return
        admin = await bot.get_chat_member(message.chat.id, message.reply_to_message.from_user.id)
        if admin.status in {'administrator', 'creator'}:
            await message.reply(f'''–¢—ã –Ω–µ –º–æ–∂–µ—à—å –¥–∞—Ç—å –±–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.''')
            return
        ban_time = int(message.text.split()[1])
        ban_type = message.text.split()[2]
        ban_reason = ' '.join(message.text.split()[3:])
    except IndexError:
        await message.reply(f'''–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: <code>/ban 4 —á–∞—Å–∞ —Å–ø–∞–º</code>''')
        return
    except ValueError:
        await message.reply(f'''–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: <code>/ban 4 —á–∞—Å–∞ —Å–ø–∞–º</code>''')
        return
    if ban_type == '–º–∏–Ω—É—Ç–∞' or ban_type == '–º–∏–Ω—É—Ç—É' or ban_type == '–º–∏–Ω—É—Ç—ã' or ban_type == '–º–∏–Ω—É—Ç':
        dnt = datetime.now() + timedelta(minutes=ban_time)
        dntt = dnt.timestamp()
        await bot.ban_chat_member(message.chat.id, message.reply_to_message.from_user.id, until_date = dntt)
        await bot.send_message(message.chat.id, f'''üî¥ <a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.full_name}</a>, –±–∞–Ω –Ω–∞ {ban_time} {ban_type} –ø–æ –ø—Ä–∏—á–∏–Ω–µ "{ban_reason}".''')
    elif ban_type == '—á–∞—Å' or ban_type == '—á–∞—Å–∞' or ban_type == '—á–∞—Å–æ–≤':
        dnt = datetime.now() + timedelta(hours=ban_time)
        dntt = dnt.timestamp()
        await bot.ban_chat_member(message.chat.id, message.reply_to_message.from_user.id, until_date = dntt)
        await bot.send_message(message.chat.id, f'''üî¥ <a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.full_name}</a>, –±–∞–Ω –Ω–∞ {ban_time} {ban_type} –ø–æ –ø—Ä–∏—á–∏–Ω–µ "{ban_reason}".''')
    elif ban_type == '–¥–µ–Ω—å' or ban_type == '–¥–Ω—è' or ban_type == '–¥–Ω–µ–π':
        dnt = datetime.now() + timedelta(days=ban_time)
        dntt = dnt.timestamp()
        await bot.ban_chat_member(message.chat.id, message.reply_to_message.from_user.id, until_date = dntt)
        await bot.send_message(message.chat.id, f'''üî¥ <a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.full_name}</a>, –±–∞–Ω –Ω–∞ {ban_time} {ban_type} –ø–æ –ø—Ä–∏—á–∏–Ω–µ "{ban_reason}".''')

@dp.message_handler(commands=['—Ä–∞–∑–º—É—Ç', 'unmute'], commands_prefix='/!.')
async def unmute_cmd(message: types.Message):
    member = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if member.status not in {'administrator', 'creator'}:
        await message.reply(f'''–¢—ã –Ω–µ –º–æ–∂–µ—à—å –¥–∞—Ç—å —Ä–∞–∑–º—É—Ç, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏–º–µ–µ—à—å –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.''')
        return
    elif not message.reply_to_message:
        await message.reply(f'''–ù—É–∂–Ω–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.''')
        return
    admin = await bot.get_chat_member(message.chat.id, message.reply_to_message.from_user.id)
    if admin.status in {'administrator', 'creator'}:
        await message.reply(f'''–¢—ã –Ω–µ –º–æ–∂–µ—à—å –¥–∞—Ç—å —Ä–∞–∑–º—É—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.''')
        return
    await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, can_send_messages=True, can_send_media_messages=True, can_send_other_messages=True, can_add_web_page_previews=True)
    await bot.send_message(message.chat.id, f'''üîä <a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.full_name}</a> –±–æ–ª—å—à–µ –Ω–µ –≤ –º—É—Ç–µ.''')

@dp.message_handler(commands=['—Ä–∞–∑–±–∞–Ω', 'unban'], commands_prefix='/!.')
async def unban_cmd(message: types.Message):
    member = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if member.status not in {'administrator', 'creator'}:
        await message.reply(f'''–¢—ã –Ω–µ –º–æ–∂–µ—à—å –¥–∞—Ç—å —Ä–∞–∑–±–∞–Ω, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏–º–µ–µ—à—å –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.''')
        return
    elif not message.reply_to_message:
        await message.reply(f'''–ù—É–∂–Ω–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.''')
        return
    admin = await bot.get_chat_member(message.chat.id, message.reply_to_message.from_user.id)
    if admin.status in {'administrator', 'creator'}:
        await message.reply(f'''–¢—ã –Ω–µ –º–æ–∂–µ—à—å –¥–∞—Ç—å —Ä–∞–∑–±–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.''')
        return
    await bot.unban_chat_member(message.chat.id, message.reply_to_message.from_user.id)
    await bot.send_message(message.chat.id, f'''‚úÖ <a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.full_name}</a> –±–æ–ª—å—à–µ –Ω–µ –≤ –±–∞–Ω–µ.''')

@dp.message_handler(commands=['–∞–¥–º–∏–Ω—ã', '–∫—Ç–æ –∞–¥–º–∏–Ω', 'admins'], commands_prefix='/!.')
async def admins_cmd(message: types.Message):
   try:
      chat_admins = await bot.get_chat_administrators(message.chat.id)
      lst = [f'''"id": "{admin.user.id}",
"full_name": "{admin.user.full_name}",
"username": "{admin.user.username}"''' for admin in chat_admins]
      await message.reply('\n\n'.join(lst))
   except aiogram.utils.exceptions.BadRequest:
      await message.reply(f'''–ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —á–∞—Ç–µ.''')
        
        
        
@dp.message_handler(commands=['–ø–∏–Ω', 'pin'], commands_prefix='/!.')
async def pin_cmd(message: types.Message):
    member = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if member.status in {'member'}:
        await message.reply(f'''–¢—ã –Ω–µ –º–æ–∂–µ—à—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏–º–µ–µ—à—å –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.''')
        return
    elif not message.reply_to_message:
        await message.reply(f'''–ù—É–∂–Ω–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.''')
        return
    await bot.pin_chat_message(message.chat.id, message.reply_to_message.message_id)
    await message.reply(f'''üìå –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ.''')

@dp.message_handler(commands=['—Ä–∞–∑–ø–∏–Ω', 'unpin'], commands_prefix='/!.')
async def unpin_cmd(message: types.Message, command: Command):
    member = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if member.status in {'member'}:
        await message.reply(f'''–¢—ã –Ω–µ –º–æ–∂–µ—à—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏–º–µ–µ—à—å –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.''')
        return
    elif command.args == '–í–°–ï' or command.args == '–í–°–µ' or command.args == '–í—Å–µ' or command.args == '–≤—Å–µ' or command.args == '–≤—Å–ï' or command.args == '–≤–°–ï' or command.args == '–≤–°–µ':
        await bot.unpin_all_chat_messages(message.chat.id)
        await message.reply(f'''üìå –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω—ã.''')
        return
    elif not message.reply_to_message:
        await message.reply(f'''–ù—É–∂–Ω–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.''')
        return
    await bot.unpin_chat_message(message.chat.id, message.reply_to_message.message_id)
    await message.reply(f'''üìå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ.''')



@dp.message_handler(content_types=['new_chat_members'])
async def new_chat_members(message: types.Message):
    await bot.send_message(message.chat.id, f'''{message.new_chat_members[0].full_name} –≤—Å—Ç—É–ø–∏–ª(-–∞) –≤ —á–∞—Ç.''')
    await message.delete()

@dp.message_handler(content_types=['left_chat_member'])
async def left_chat_member(message: types.Message):
    await bot.send_message(message.chat.id, f'''{message.left_chat_member.full_name} –ø–æ–∫–∏–Ω—É–ª(-–∞) —á–∞—Ç.''')
    await message.delete()
    
@dp.message_handler(content_types=['new_chat_title', 'new_chat_photo', 'delete_chat_photo', 'message_auto_delete_timer_changed', 'pinned_message', 'video_chat_scheduled', 'video_chat_started', 'video_chat_ended'])
async def other_types(message: types.Message):
    await message.delete()



@dp.message_handler(lambda message: message.text.casefold() == '—Ä–∏–∫' or message.text.casefold() == 'rick' or message.text.casefold() == '–±–æ—Ç' or message.text.casefold() == 'bot')
async def ping_cmd(message: types.Message):
   await message.reply('‚úÖ –ù–∞ –º–µ—Å—Ç–µ!')

@dp.message_handler(lambda message: message.text.casefold() == '—Ä–∏–∫—Ä–æ–ª–ª')
async def rickroll(message: types.Message):
   await bot.forward_message(message.chat.id, -1001882577870, 2)



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False, on_startup=on_startup)
